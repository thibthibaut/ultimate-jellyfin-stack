version: "3.0"

networks:
  proxy:
    external: false
  jellyfin_default:
    external: false
  starr:
    external: false
  jellystat:
    external: false
  gluetun_network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.10.0.0/16

services:
  # REVERSE PROXY IS IN OTHER DOCKER COMPOSE STACK

  #Jellyfin - used to display the media
  #This can also be replaced by Emby/Plex
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - JELLYFIN_PublishedServerUrl=${JELLYFIN_URL}
      - PUID=${PUID}
      - PGID=${PGID}
    ports:
      - 8096:8096
      - 8920:8920
    volumes:
      - ${BASE_PATH}/jellyfin/config:/config
      - ${MEDIA_SHARE}/media:/media
      - ${BASE_PATH}/swag/config/keys/letsencrypt:/certificates
    restart: unless-stopped
    networks:
      - proxy
      - starr
    
  #Radarr - used to find movies automatically
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/radarr/config:/config
      - ${MEDIA_SHARE}:/data #Access to the entire /media
    ports:
      - 7878:7878
    networks:
      proxy:
      starr:
      gluetun_network:
        ipv4_address: ${RADARR_IPV4}
    restart: unless-stopped
    
  #Sonarr - used to find shows automatically
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/sonarr/config:/config
      - ${MEDIA_SHARE}:/data #Access to the entire /media
    ports:
      - 8989:8989
    networks:
      proxy:
      starr:
      gluetun_network:
        ipv4_address: ${SONARR_IPV4}
    restart: unless-stopped
  
  #Readarr - Used to download books
  # readarr:
  #   image: lscr.io/linuxserver/readarr:develop
  #   container_name: readarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${BASE_PATH}/readarr/config:/config
  #     - ${MEDIA_SHARE}:/data
  #   ports:
  #     - 8787:8787
  #   networks:
  #     - proxy
  #     - starr
  #   restart: unless-stopped
    
  #Lidarr - Used to download music 
  # lidarr:
  #   image: lscr.io/linuxserver/lidarr:latest
  #   container_name: lidarr
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${BASE_PATH}/lidarr/config:/config
  #     - ${MEDIA_SHARE}:/data
  #   ports:
  #     - 8686:8686
  #   networks:
  #     - proxy
  #     - starr
  #   restart: unless-stopped

  #Kapowarr - Used to download comics
  # kapowarr:
  #   image: 'mrcas/kapowarr:latest'
  #   container_name: kapowarr
  #   network_mode: "service:gluetun"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   volumes:
  #     - ${BASE_PATH}/kapowarr/config:/app/db
  #     - ${MEDIA_SHARE}/temp_downloads:/app/temp_downloads
  #     - ${MEDIA_SHARE}:/data
  #   restart: unless-stopped
    
  #Prowlarr - manages your Sonarr, Radarr and download client
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/prowlarr/config:/config
    restart: unless-stopped
    
  #Autobrr - used to grab torrents using the trackers IRC channel - Increases seeding due to grabbing content before RSS feed
  autobrr:
    container_name: autobrr
    image: ghcr.io/autobrr/autobrr:latest
    restart: unless-stopped
    network_mode: "service:gluetun"
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${BASE_PATH}/autobrr/config:/config

  #jellyseer - allows users to request media on their own
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/jellyseerr/config:/app/config
      - ${MEDIA_SHARE}:/data #Access to the entire ${BASE_PATH}
    networks:
      - proxy
      - starr
    ports:
      - 5055:5055
    restart: unless-stopped
    
  #Flaresolerr - Used as a proxy server to bypass Cloudflare and DDoS-GUARD protection.
  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: alexfozor/flaresolverr:pr-1300-experimental
    container_name: flaresolverr
    network_mode: "service:gluetun"
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=${TZ}
      - LANG=en_GB
      - DRIVER=nodriver
    restart: unless-stopped
      
  #Qbittorent - torrenting software
  #
  #You can also use RuTorrent, Transmisson or Deluge
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
      - TORRENTING_PORT=8694 #Make sure to port forward this port in your router so you can seed more effectively
      - UMASK=002
    volumes:
      - ${BASE_PATH}/qbittorent/config:/config
      - ${MEDIA_SHARE}:/data
    restart: unless-stopped

  #Tdarr - to transcode videos from one format to another like x265 or H.265
  #
  #This container requires a decent amount of horse power to run but will save space in the long run
  # tdarr:
  #   container_name: tdarr
  #   image: ghcr.io/haveagitgat/tdarr:latest
  #   restart: unless-stopped
  #   ports:
  #     - 8265:8265 # webUI port
  #     - 8266:8266 # server port
  #   environment:
  #     - TZ=${TZ}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - UMASK_SET=002
  #     - nodeName=ServerNode
  #     - serverIP=0.0.0.0
  #     - serverPort=8266
  #     - webUIPort=8265
  #     - internalNode=true
  #     - inContainer=true
  #     - ffmpegVersion=6
  #   volumes:
  #     - ${BASE_PATH}/tdarr/server:/app/server
  #     - ${BASE_PATH}/tdarr/configs:/app/configs
  #     - ${BASE_PATH}/tdarr/logs:/app/logs
  #     - ${MEDIA_SHARE}:/data
  #     - ${TRANSCODE_PATH:-/transcode_cache}:/temp
  #   devices:
  #    - /dev/dri:/dev/dri #Required for HW transcoding /share QuickSync
  #   networks:
  #     - proxy
      
  #Bazarr - for subtitles. Try to use SRT format if you can rather than PGS due to performance issues
  bazarr:
    container_name: bazarr
    image: lscr.io/linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${BASE_PATH}/bazarr/config:/config
      - ${MEDIA_SHARE}:/data
    ports:
      - 6767:6767
    networks:
      - starr
      - proxy
      
  #Cross Seed - used to take torrents from one tracker and seed them on another without leeching first. Increases ratio
  #
  #This is fairly advanced but can be removed if you don't think you will need it. Some trackers also don't allow this
  # cross-seed:
  #   image: ghcr.io/cross-seed/cross-seed:latest
  #   container_name: cross-seed
  #   network_mode: "service:gluetun"
  #   user: ${PUID}:${PGID}
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   volumes:
  #     - ${BASE_PATH}/cross-seed/config:/config #To configure you have to manually nano the config file
  #     - ${BASE_PATH}/qbittorent/config/qBittorrent/BT_backup:/torrents:ro # your torrent clients .torrent cache, can and should be mounted read-only (e.g. qbit: `BT_Backup` | deluge: `state` | transmission: `transmission/torrents` | rtorrent: session dir from `.rtorrent.rc`)
  #     - ${MEDIA_SHARE}/torrents/cross-seed:/data/cross-seeds
  #     # - ${MEDIA_SHARE}/cross-seed/current-cross-seeds:/data/cross-seeds # A place to temp save current cross seed .torrent files
  #     #- ${MEDIA_SHARE}/downloads:/data # OPTIONAL!!! this is dataDir path (for data-based matching) - will need to replicate your torrent client's container path (like Arr's do)
  #   command: daemon # this enables the search mode, change to daemon to specifically run the daemon
    
  #Wizarr - Allows you to create a share link that you can send to users to invite them to your media server
  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr:latest
    ports:
      - 5690:5690
    volumes:
      - ${BASE_PATH}/wizarr/data/database:/data/database
    networks:
      - proxy
      - starr
      
  #Dozzle - Used to easily view logs of any container in real time!    
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    
  #Unpacker - Used to unzip zipped files
  unpackerr:
    image: ghcr.io/hotio/unpackerr:latest
    container_name: unpackerr

    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - ${MEDIA_SHARE}:/data
      #- ${BASE_PATH}/unpackerr/config:/config
    restart: always
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    environment:
      - PUID=${PUID}
      - PGID={$PGID}
      - UN_START_DELAY=1m
      - UMASK=002
      - TZ=${TZ}
      #- UN_DEBUG=true
      # Sonarr Config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=${SONARR_KEY}
      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
      - UN_SONARR_0_TIMEOUT=10s
      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
      # Radarr Config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=${RADARR_KEY}
      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
      - UN_RADARR_0_TIMEOUT=10s
      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
    networks:
      - starr

  # cabernet:
  #   image: ghcr.io/cabernetwork/cabernet:latest
  #   container_name: cabernet
  #   volumes:
  #     - ${BASE_PATH}/cabernet/extensions:/app/plugins_ext
  #     - ${BASE_PATH}/cabernet/data:/app/data
  #   ports:
  #     - 5004:5004/tcp
  #     - 6077:6077/tcp
  #   environment:
  #     - TZ=${TZ}
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #   networks:
  #     - proxy
      
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      # - VPN_SERVICE_PROVIDER=mullvad
      # - VPN_TYPE=wireguard
      # - WIREGUARD_PRIVATE_KEY=${WIREGUARD_KEY}
      # - WIREGUARD_ADDRESSES=${WIREGUARD_ADD}
      # - SERVER_CITIES=${VPN_SERVER_CITIES}
      # - UPDATER_PERIOD=24h
      # - UPDATER_VPN_SERVICE_PROVIDERS=mullvad
      # - WIREGUARD_MTU=${WIREGUARD_MTU:-1200}
      # - PUBLICIP_API=${PUBLICIP_API}
      # - PUBLICIP_API_TOKEN=${PUBLICIP_TOKEN}
      - VPN_SERVICE_PROVIDER=nordvpn
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - SERVER_REGIONS=Spain
      - VPN_TYPE=openvpn
      - UPDATER_PERIOD=24h
    ports:
      - 2468:2468/tcp # cross-seed
      - 8080:8080/tcp # qBit
      - 8694:8694/tcp # qBit
      - 5656:5656/tcp # kapowarr
      - 8191:8191/tcp # flaresolverr
      - 9696:9696/tcp # prowlarr
      - 7474:7474 # autobrr
    networks:
      - starr
      - proxy
      - gluetun_network
    # IF VPN CANNOT CONNECT, USE BELOW COMMAND TO UPDATE SERVERS.
    # command: update -enduser -providers mullvad

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${BASE_PATH}/homarr/configs:/app/data/configs
      - ${BASE_PATH}/homarr/icons:/app/public/icons
      - ${BASE_PATH}/homarr/data:/data
    ports:
      - 7575:7575
    networks:
      - proxy

  # decluttarr:
  #   image: ghcr.io/manimatter/decluttarr:latest
  #   container_name: decluttarr
  #   restart: always
  #   environment:
  #    TZ: ${TZ}
  #    PUID: ${PUID}
  #    PGID: ${PGID}
  #    ## General
  #    # TEST_RUN=True
  #    # SSL_VERIFICATION=False
  #    LOG_LEVEL: INFO
  #    ## Features 
  #    REMOVE_TIMER: 10
  #    REMOVE_FAILED: True
  #    REMOVE_FAILED_IMPORTS: True
  #    REMOVE_METADATA_MISSING: True
  #    REMOVE_MISSING_FILES: True
  #    REMOVE_ORPHANS: True
  #    REMOVE_SLOW: True
  #    REMOVE_STALLED: True
  #    REMOVE_UNMONITORED: True
  #    RUN_PERIODIC_RESCANS: '
  #       {
  #         "SONARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7},
  #         "RADARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7}
  #       }'
  #    # Feature Settings
  #    PERMITTED_ATTEMPTS: 3
  #    NO_STALLED_REMOVAL_QBIT_TAG: Don't Kill
  #    MIN_DOWNLOAD_SPEED: 100     
  #    FAILED_IMPORT_MESSAGE_PATTERNS: '
  #       [
  #         "Not a Custom Format upgrade for existing", 
  #         "Not an upgrade for existing"
  #       ]'
  #    ## Radarr
  #    RADARR_URL: http://radarr:7878
  #    RADARR_KEY: $RADARR_KEY
  #    ## Sonarr
  #    SONARR_URL: http://sonarr:8989
  #    SONARR_KEY: $SONARR_KEY
  #    ## Lidarr
  #    # LIDARR_URL: http://lidarr:8686
  #    # LIDARR_KEY: $LIDARR_KEY
  #    ## Readarr
  #    # READARR_URL: http://readarr:8787
  #    # READARR_KEY: $READARR_KEY
  #    ## qBitorrent
  #    QBITTORRENT_URL: http://gluetun:8080
  #    QBITTORRENT_USERNAME: $QBIT_USER
  #    QBITTORRENT_PASSWORD: $QBIT_PASS
  #   networks:
  #     - starr
  #     - proxy

  jellystat-db:
    image: postgres:15.2
    container_name: jellystat-db
    environment:
      POSTGRES_DB: 'jfstat'
      POSTGRES_USER: ${JELLYSTATDB_USER:-postgres}
      POSTGRES_PASSWORD: ${JELLYSTATDB_PASS:-password}
    volumes:
      - ${BASE_PATH}/jellystat/postgres-data:/var/lib/postgresql/data # Mounting the volume
    restart: unless-stopped
    networks:
      - jellystat

  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    environment:
      POSTGRES_USER: ${JELLYSTATDB_USER:-postgres}
      POSTGRES_PASSWORD: ${JELLYSTATDB_PASS:-password}
      POSTGRES_IP: jellystat-db
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-'my-secret-jwt-key'}
    ports:
      - 3000:3000 #Server Port
    volumes:
      - ${BASE_PATH}/jellystat/postgres-backup:/app/backend/backup-data # Mounting the volume
    depends_on:
      - jellystat-db
    restart: unless-stopped
    networks:
      - jellystat
      - proxy
